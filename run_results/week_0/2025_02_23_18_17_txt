-----------------------------------

Executing query: 1. Which seller has delivered the most orders to customers in Rio de Janeiro?
SQL query: 
SELECT 
    oi.seller_id, 
    COUNT(DISTINCT o.order_id) AS total_orders
FROM 
    orders o
JOIN 
    order_items oi ON o.order_id = oi.order_id
JOIN 
    customers c ON o.customer_id = c.customer_id
WHERE 
    c.customer_city = 'Rio de Janeiro' AND 
    o.order_status = 'delivered'
GROUP BY 
    oi.seller_id
ORDER BY 
    total_orders DESC
LIMIT 1;

Query result:
Empty DataFrame
Columns: [seller_id, total_orders]
Index: []

-----------------------------------

Executing query: 2. What's the average review score for products in the 'beleza_saude' category?
SQL query: 
SELECT AVG(orv.review_score) AS average_review_score
FROM order_reviews orv
JOIN orders o ON orv.order_id = o.order_id
JOIN order_items oi ON o.order_id = oi.order_id
JOIN products p ON oi.product_id = p.product_id
WHERE p.product_category_name = 'beleza_saude';

Query result:
   average_review_score
0              4.142768

-----------------------------------

Executing query: 3. How many sellers have completed orders worth more than 100,000 BRL in total?
SQL query: 
SELECT COUNT(DISTINCT oi.seller_id) AS seller_count
FROM order_items oi
JOIN orders o ON oi.order_id = o.order_id
WHERE o.order_status = 'delivered'
GROUP BY oi.seller_id
HAVING SUM(oi.price) > 100000;

Query result:
    seller_count
0              1
1              1
2              1
3              1
4              1
5              1
6              1
7              1
8              1
9              1
10             1
11             1
12             1
13             1
14             1
15             1
16             1

-----------------------------------

Executing query: 4. Which product category has the highest rate of 5-star reviews?
SQL query: 
SELECT 
    p.product_category_name, 
    COUNT(r.review_score) * 1.0 / COUNT(*) AS five_star_rate
FROM 
    orders o
JOIN 
    order_items oi ON o.order_id = oi.order_id
JOIN 
    products p ON oi.product_id = p.product_id
JOIN 
    order_reviews r ON o.order_id = r.order_id
WHERE 
    r.review_score = 5
GROUP BY 
    p.product_category_name
ORDER BY 
    five_star_rate DESC
LIMIT 1;

Query result:
   product_category_name  five_star_rate
0  utilidades_domesticas             1.0

-----------------------------------

Executing query: 5. What's the most common payment installment count for orders over 1000 BRL?
SQL query: 
SELECT payment_installments, COUNT(*) AS installment_count
FROM order_payments
WHERE order_id IN (
    SELECT order_id
    FROM order_items
    GROUP BY order_id
    HAVING SUM(price + freight_value) > 1000
)
GROUP BY payment_installments
ORDER BY installment_count DESC
LIMIT 1;

Query result:
   payment_installments  installment_count
0                    10                457

-----------------------------------

Executing query: 6. Which city has the highest average freight value per order?
SQL query: 
SELECT c.customer_city, AVG(oi.freight_value) AS average_freight_value
FROM orders o
JOIN order_items oi ON o.order_id = oi.order_id
JOIN customers c ON o.customer_id = c.customer_id
GROUP BY c.customer_city
ORDER BY average_freight_value DESC
LIMIT 1;

Query result:
  customer_city  average_freight_value
0    itupiranga                 203.38

-----------------------------------

Executing query: 7. What's the most expensive product category based on average price?
SQL query: 
SELECT 
    p.product_category_name, 
    AVG(oi.price) AS avg_price
FROM 
    order_items oi
JOIN 
    products p ON oi.product_id = p.product_id
GROUP BY 
    p.product_category_name
ORDER BY 
    avg_price DESC
LIMIT 1;

Query result:
  product_category_name    avg_price
0                   pcs  1098.340542

-----------------------------------

Executing query: 8. Which product category has the shortest average delivery time?
SQL query: 
SELECT 
    p.product_category_name,
    AVG(JULIANDAY(o.order_delivered_customer_date) - JULIANDAY(o.order_approved_at)) AS average_delivery_time
FROM 
    orders o
JOIN 
    order_items oi ON o.order_id = oi.order_id
JOIN 
    products p ON oi.product_id = p.product_id
WHERE 
    o.order_delivered_customer_date IS NOT NULL
GROUP BY 
    p.product_category_name
ORDER BY 
    average_delivery_time ASC
LIMIT 1;

Query result:
  product_category_name  average_delivery_time
0    artes_e_artesanato               4.969078

-----------------------------------

Executing query: 9. How many orders have items from multiple sellers?
SQL query: 
SELECT COUNT(DISTINCT order_id) AS order_count
FROM order_items
GROUP BY order_id
HAVING COUNT(DISTINCT seller_id) > 1;

Query result:
      order_count
0               1
1               1
2               1
3               1
4               1
...           ...
1273            1
1274            1
1275            1
1276            1
1277            1

[1278 rows x 1 columns]

-----------------------------------

Executing query: 10. What percentage of orders are delivered before the estimated delivery date?
SQL query: 
SELECT 
    (COUNT(*) * 100.0) / (SELECT COUNT(*) FROM orders WHERE order_delivered_customer_date IS NOT NULL) AS percentage_delivered_before_estimated
FROM 
    orders
WHERE 
    order_delivered_customer_date < order_estimated_delivery_date
    AND order_delivered_customer_date IS NOT NULL;

Query result:
   percentage_delivered_before_estimated
0                              91.887101