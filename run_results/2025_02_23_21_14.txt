-----------------------------------

Executing query: 1. Which seller has delivered the most orders to customers in Rio de Janeiro? [string: seller_id]
SQL query: 
SELECT oi.seller_id
FROM order_items oi
JOIN orders o ON oi.order_id = o.order_id
JOIN customers c ON o.customer_id = c.customer_id
WHERE c.customer_city = 'Rio de Janeiro'
GROUP BY oi.seller_id
ORDER BY COUNT(DISTINCT oi.order_id) DESC
LIMIT 1;

Query result:
Empty DataFrame
Columns: [seller_id]
Index: []

-----------------------------------

Executing query: 2. What's the average review score for products in the 'beleza_saude' category? [float: score]
SQL query: 
SELECT AVG(orvw.review_score) AS average_review_score
FROM order_reviews AS orvw
JOIN orders AS ord ON orvw.order_id = ord.order_id
JOIN order_items AS oitm ON ord.order_id = oitm.order_id
JOIN products AS prod ON oitm.product_id = prod.product_id
WHERE prod.product_category_name = 'beleza_saude';

Query result:
   average_review_score
0              4.142768

-----------------------------------

Executing query: 3. How many sellers have completed orders worth more than 100,000 BRL in total? [integer: count]
SQL query: 
SELECT COUNT(DISTINCT oi.seller_id) AS sellers_count
FROM orders o
JOIN order_items oi ON o.order_id = oi.order_id
WHERE o.order_status = 'delivered'
GROUP BY oi.seller_id
HAVING SUM(oi.price) > 100000;

Query result:
    sellers_count
0               1
1               1
2               1
3               1
4               1
5               1
6               1
7               1
8               1
9               1
10              1
11              1
12              1
13              1
14              1
15              1
16              1

-----------------------------------

Executing query: 4. Which product category has the highest rate of 5-star reviews? [string: category_name]
SQL query: 
SELECT p.product_category_name
FROM order_reviews r
JOIN order_items oi ON r.order_id = oi.order_id
JOIN products p ON oi.product_id = p.product_id
WHERE r.review_score = 5
GROUP BY p.product_category_name
ORDER BY COUNT(*) DESC
LIMIT 1;

Query result:
  product_category_name
0          beleza_saude

-----------------------------------

Executing query: 5. What's the most common payment installment count for orders over 1000 BRL? [integer: installments]
SQL query: 
SELECT payment_installments
FROM order_payments
WHERE order_id IN (
    SELECT order_id
    FROM order_items
    GROUP BY order_id
    HAVING SUM(price) > 1000
)
GROUP BY payment_installments
ORDER BY COUNT(*) DESC
LIMIT 1;

Query result:
   payment_installments
0                    10

-----------------------------------

Executing query: 6. Which city has the highest average freight value per order? [string: city_name]
SQL query: 
SELECT s.seller_city
FROM order_items oi
JOIN sellers s ON oi.seller_id = s.seller_id
GROUP BY s.seller_city
ORDER BY AVG(oi.freight_value) DESC
LIMIT 1;

Query result:
  seller_city
0  lages - sc

-----------------------------------

Executing query: 7. What's the most expensive product category based on average price? [string: category_name]
SQL query: 
SELECT p.product_category_name 
FROM order_items oi
JOIN products p ON oi.product_id = p.product_id
GROUP BY p.product_category_name
ORDER BY AVG(oi.price) DESC
LIMIT 1;

Query result:
  product_category_name
0                   pcs

-----------------------------------

Executing query: 8. Which product category has the shortest average delivery time? [string: category_name]
SQL query: 
SELECT p.product_category_name
FROM products p
JOIN order_items oi ON p.product_id = oi.product_id
JOIN orders o ON oi.order_id = o.order_id
WHERE o.order_delivered_customer_date IS NOT NULL
GROUP BY p.product_category_name
ORDER BY AVG(JULIANDAY(o.order_delivered_customer_date) - JULIANDAY(o.order_purchase_timestamp)) ASC
LIMIT 1;

Query result:
  product_category_name
0    artes_e_artesanato

-----------------------------------

Executing query: 9. How many orders have items from multiple sellers? [integer: count]
SQL query: 
SELECT COUNT(DISTINCT order_id) AS order_count
FROM order_items
GROUP BY order_id
HAVING COUNT(DISTINCT seller_id) > 1;

Query result:
      order_count
0               1
1               1
2               1
3               1
4               1
...           ...
1273            1
1274            1
1275            1
1276            1
1277            1

[1278 rows x 1 columns]

-----------------------------------

Executing query: 10. What percentage of orders are delivered before the estimated delivery date? [float: percentage]
SQL query: 
SELECT (100.0 * SUM(CASE WHEN order_delivered_customer_date < order_estimated_delivery_date THEN 1 ELSE 0 END) / COUNT(*)) AS percentage_delivered_early
FROM orders
WHERE order_delivered_customer_date IS NOT NULL AND order_estimated_delivery_date IS NOT NULL;

Query result:
   percentage_delivered_early
0                   91.887101